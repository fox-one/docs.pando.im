"use strict";(self.webpackChunkpando_docs=self.webpackChunkpando_docs||[]).push([[1441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>w});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,w=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?o.createElement(w,i(i({ref:t},d),{},{components:n})):o.createElement(w,i({ref:t},d))}));function w(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={title:"Invoke Wallets",date:new Date("2021-07-22T22:33:07.000Z")},i=void 0,l={unversionedId:"lake/guide/invoke-wallets",id:"lake/guide/invoke-wallets",title:"Invoke Wallets",description:"At present, there are two kinds of wallets that are compatible with 4swap/Lake:",source:"@site/developer/lake/guide/invoke-wallets.md",sourceDirName:"lake/guide",slug:"/lake/guide/invoke-wallets",permalink:"/developer/lake/guide/invoke-wallets",draft:!1,tags:[],version:"current",frontMatter:{title:"Invoke Wallets",date:"2021-07-22T22:33:07.000Z"},sidebar:"docs",previous:{title:"Using SDK to Trade",permalink:"/developer/lake/guide/using-sdk"},next:{title:"Lake API Overview",permalink:"/developer/lake/apis/overview"}},s={},c=[{value:"Invoke Messenger",id:"invoke-messenger",level:2},{value:"Way 1",id:"way-1",level:3},{value:"Way 2",id:"way-2",level:3},{value:"Invoke Fennec",id:"invoke-fennec",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"At present, there are two kinds of wallets that are compatible with 4swap/Lake:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/apps/wallets#mixin-messenger"},"Mixin Messenger"),": A mobile wallet that is created by Mixin core team."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/apps/wallets#fennec"},"Fennec"),": A browser extension wallet created by Fox.ONE team.")),(0,a.kt)("p",null,"If you are going to provide a web interface that supports any of these wallets, you need to integrate your web app with the wallets and invoke them to pay at the desired time."),(0,a.kt)("h2",{id:"invoke-messenger"},"Invoke Messenger"),(0,a.kt)("p",null,"To invoke the payment interface of Mixin Messenger is pretty simple:"),(0,a.kt)("p",null,"At first, you need to get the ",(0,a.kt)("inlineCode",{parentName:"p"},"code_url")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," which indicates a multisig transfer need to confirm."),(0,a.kt)("p",null,"There are two ways to get it:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Follow the API ",(0,a.kt)("a",{parentName:"li",href:"../apis/actions"},'"/api/actions"')," to create a ",(0,a.kt)("a",{parentName:"li",href:"../action-protocol#swap-crypto"},"swap action")),(0,a.kt)("li",{parentName:"ol"},"Call the API ",(0,a.kt)("inlineCode",{parentName:"li"},"https://api.mixin.one/payments")," to get a payment object which contains ",(0,a.kt)("inlineCode",{parentName:"li"},"code_id")),(0,a.kt)("li",{parentName:"ol"},"Generate a transaction at your own backend and pass the code/code_url to the frontend.")),(0,a.kt)("p",null,"Here I will show you the first ways:"),(0,a.kt)("h3",{id:"way-1"},"Way 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const BTC_ASSET_ID = 'c6d0c728-2624-429b-8e0d-d9d19b6592fa';\nconst ETH_ASSET_ID = '43d61dcd-e413-450d-80b8-101d5e903357';\n\nasync function pay() {\n  const follow_id = uuid.v4();\n\n  // construct the memo\n  const memo = `3,${YOUR_USER_ID},${follow_id},${ETH_ASSET_ID},${''},${'0.0001'}`;\n\n  // create action to swap from BTC to ETH\n  const resp = await http.post(`/actions`, {\n    data: {\n      action: memo,\n      amount: \"0.0001\",\n      asset_id: BTC_ASSET_ID,\n      // or leave broker_id empty\n      broker_id: '5dbdb169-d56d-4b5b-b066-9b0780691b14',\n    }\n  });\n\n  // if your web app is running in Messenger's webview\n  // it will invoke the payment UI\n  window.location.href = `https://mixin.one/codes/${resp.code}`;\n\n  // if your web also support to visit on desktop\n  // you may need to show the QrCode to the users like this:\n  // const qrCode = generateQrCode(`https://mixin.one/codes/${resp.coded}`)\n  // showQrCodeDialog();\n}\n")),(0,a.kt)("h3",{id:"way-2"},"Way 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const BTC_ASSET_ID = 'c6d0c728-2624-429b-8e0d-d9d19b6592fa';\nconst ETH_ASSET_ID = '43d61dcd-e413-450d-80b8-101d5e903357';\n\nasync function pay() {\n  const follow_id = uuid.v4();\n\n  // construct the memo\n  const memo = `3,${YOUR_USER_ID},${follow_id},${ETH_ASSET_ID},${''},${'0.0001'}`;\n\n  // create action to swap from BTC to ETH\n  const resp = await http.post(`https://api.mixin.one/payments`, {\n    data: {\n      BTC_ASSET_ID,\n      '0.0001',\n      memo,\n      trace_id: follow_id,\n      // read receivers and threshold from API `/api/information`\n      opponent_multisig: { receivers, threshold },\n    }\n  });\n\n  // if your web app is running in Messenger's webview\n  // it will invoke the payment UI\n  window.location.href = resp.data.code_url;\n\n  // if your web also support to visit on desktop\n  // you may need to show the QrCode to the users like this:\n  // const qrCode = generateQrCode(`https://mixin.one/codes/${resp.coded}`)\n  // showQrCodeDialog();\n}\n")),(0,a.kt)("h2",{id:"invoke-fennec"},"Invoke Fennec"),(0,a.kt)("p",null,"Fennec is browser extension wallet, which stores encrypted keystores in the browser."),(0,a.kt)("p",null,"You don't need to call Mixin API to load assets, read profile or prepare a payment. Instead, Fennec provides its own API to do them all."),(0,a.kt)("p",null,"For more information, please read the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fox-one/fennec#4-interact-with-your-mixin-dapp"},"demo's source code")," to figure out."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// fennec ext\nlet ext = null;\n// fennec context\nlet ctx = null;\n// token\nlet token = null;\n\nasync function load() {\n  // check the ext and get the context\n  if (window.__MIXIN__ && window.__MIXIN__.mixin_ext) {\n    ext = window.__MIXIN__.mixin_ext;\n    ctx = await ext.enable(\"demo\");\n    if (ctx) {\n      token = await ctx.wallet.signToken({\n        payload: { from: \"demo\" }\n      });\n    }\n  }\n}\n\nconst BTC_ASSET_ID = 'c6d0c728-2624-429b-8e0d-d9d19b6592fa';\nconst ETH_ASSET_ID = '43d61dcd-e413-450d-80b8-101d5e903357';\n\nfunction pay() {\n  const follow_id = uuid.v4();\n\n  // construct the memo\n  const memo = `3,${YOUR_USER_ID},${follow_id},${ETH_ASSET_ID},${''},${'0.0001'}`;\n\n  // create action to swap from BTC to ETH\n  const resp = await http.post(`/actions`, {\n    data: {\n      action: memo,\n      amount: \"0.0001\",\n      asset_id: BTC_ASSET_ID,\n      // or leave broker_id empty\n      broker_id: '5dbdb169-d56d-4b5b-b066-9b0780691b14',\n    }\n  });\n\n  ctx.wallet.multisigsPayment({ code: resp.code });\n}\n")))}p.isMDXComponent=!0}}]);